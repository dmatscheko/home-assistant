blueprint:
  name: Fortgeschrittene Heizungssteuerung
  author: panhans, dmatscheko
  description: "

    ## Kernfunktionen

    - Heizung basierend auf einem Zeitplan, der Anwesenheit von Personen und/oder Anwesenheitssensor

    - Fenster geöffnet / TRV aus

    - Party-Modus

    - Gästemodus (wenn niemand zu Hause ist, der die Heizung automatisch aktiviert)

    - Wintermodus: Aktivierung / Deaktivierung der Automatisierung selbst

    - Urlaubsmodus: Bereitstellung eines zweiten Urlaubszeitplans

    - TRV-Kalibrierung durch einen externen Temperatursensor

    - Mehrere Anpassungen zur Behebung von TRV-Problemen


    ## Neu in Version 3

    - Einstellen der Komforttemperatur mit Ihren TRVs

    - Der Gästemodus kann ein Timer sein

    - Mehrere Fenster / Türen möglich

    - Kalibrierung wird nur ausgelöst, wenn der externe Sensor oder die aktuelle TRV-Temperatur aktualisiert wird - nicht mehr zeitbasiert

    - Einstellbare Kalibrierung

    - Die Komforttemperatur kann in der Automatisierung **oder** über eine Eingabenummer festgelegt werden

    - Der Party-Modus überschreibt alle anderen Einstellungen

    - Vereinfachte und funktionalere Anwesenheitserkennung

    - Nur mögliche Anwesenheitserkennung

    - Option zum Ausschalten der Klimazonen anstelle der Mindesttemperatur

    - Mehrere Optimierungen unter der Haube, um das Zigbee-Mesh nicht zu überfluten und die Serviceaufrufe zu reduzieren


    ## Zusätzliche Informationen

    **Version**: 3.2

    **Hilfe & FAQ**: [Fortgeschrittene Heizungssteuerung](https://community.home-assistant.io/t/advanced-heating-control)

    **Debug-Konfiguration**: `blueprints.panhans.heatingcontrol: debug`



    Wenn Ihnen meine Arbeit gefällt und Sie mich unterstützen möchten, können Sie dies gerne tun.


    [![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/Q5Q3QEH52)

    "
  source_url: https://github.com/panhans/homeassistant/blob/main/blueprints/automation/panhans/heating_control.yaml
  domain: automation
  input:
    input_trvs:
      name: Thermostate / Ventile
      description: Zu steuernde Thermostate
      selector:
        entity:
          filter:
            - domain:
                - climate
          multiple: true

    input_scheduler_regular:
      name: Zeitplan (optional)
      description:
        Zeitplan, der angibt, wann die Komforttemperatur eingestellt werden kann
        (Zeitplanstatus aktiviert). Der Zeitplan kann im Abschnitt "Helfer" in Ihren
        Home Assistant-Einstellungen hinzugefügt werden.
      default:
      selector:
        entity:
          filter:
            - domain:
                - schedule
          multiple: false

    input_temperature_minimum:
      name: Mindesttemperatur
      description:
        Wenn niemand zu Hause ist oder der Zeitplanstatus deaktiviert ist, wird die
        Mindesttemperatur eingestellt.
      default: 19
      selector:
        number:
          min: 12.0
          max: 24.0
          step: 0.5
          mode: slider
          unit_of_measurement: °C

    input_temperature_comfort_static:
      name: Komforttemperatur
      description: Stellen Sie eine statische Komforttemperatur ein.
      default: 22
      selector:
        number:
          min: 12.0
          max: 30.0
          step: 0.5
          mode: slider
          unit_of_measurement: °C

    input_temperature_comfort:
      name: Komforttemperatur (optional)
      description: Wenn Sie die Komforttemperatur in der Benutzeroberfläche einstellen möchten, geben Sie eine Eingabenummer an.
      default:
      selector:
        entity:
          filter:
            - domain:
                - input_number
          multiple: false

    input_persons:
      name: Personen (optional)
      description:
        Wenn eine Person zu Hause ist und der Zeitplanstatus aktiviert ist, wird die Komforttemperatur eingestellt.
      default: []
      selector:
        entity:
          filter:
            - domain:
                - person
          multiple: true

    input_mode_party:
      name: Party-Modus (optional)
      description: Überschreibt Wintermodus und Zeitplan. Wenn aktiviert, wird die Heizung aktiviert.
      default:
      selector:
        entity:
          filter:
            - domain:
                - input_boolean
                - binary_sensor
                - timer
          multiple: false

    input_mode_guest:
      name: Gästemodus (optional)
      description: Aktiviert den Zeitplan und ignoriert, ob jemand zu Hause ist oder nicht.
      default:
      selector:
        entity:
          filter:
            - domain:
                - input_boolean
                - binary_sensor
                - timer
          multiple: false

    input_windows:
      name: Fenster / Türen (optional)
      description: Wenn während des Lüftens geöffnet, werden die TRVs ausgeschaltet.
      default: []
      selector:
        entity:
          filter:
            - domain:
                - binary_sensor
          multiple: true

    input_windows_reaction_time:
      name: Reaktionszeit Fenster / Tür
      description: Dauer, für die ein Fenster oder eine Tür geöffnet/geschlossen sein muss, damit die Thermostate schließen/öffnen.
      default: 10
      selector:
        number:
          min: 0.0
          max: 60.0
          step: 1.0
          mode: slider
          unit_of_measurement: s

    input_mode_winter:
      name: Wintermodus (optional)
      description: Wenn aktiviert, wird die geplante Heizung aktiviert, andernfalls bleiben die TRVs aus.
      default:
      selector:
        entity:
          filter:
            - domain:
                - input_boolean
                - binary_sensor
          multiple: false

    input_scheduler_holiday:
      name: Urlaubszeitplan (optional)
      description: Zeitplan für Urlaube
      default:
      selector:
        entity:
          filter:
            - domain:
                - schedule
          multiple: false

    input_mode_holiday:
      name: Urlaubsmodus (optional)
      description: Wenn aktiviert, ist der definierte Urlaubszeitplan anstelle des Standardzeitplans aktiv.
      default:
      selector:
        entity:
          filter:
            - domain:
                - input_boolean
                - binary_sensor
          multiple: false

    input_presence_sensor:
      name: Anwesenheitssensor (optional)
      description: Wenn ein Anwesenheitssensor angegeben wurde, wird die Heizung auch dann durchgeführt, wenn der Zeitplan deaktiviert ist, aber Anwesenheit festgestellt wurde. Dieser Anwesenheitssensor hat nur dann Auswirkungen, wenn kein Zeitplan definiert ist oder der aktive Zeitplan deaktiviert ist.
      default:
      selector:
        entity:
          filter:
            - domain:
                - binary_sensor
          multiple: false

    input_scheduler_presence:
      name: Anwesenheitssensor-Zeitplan (optional)
      description: Dieser optionale Zeitplan legt fest, wann die Heizung durch Anwesenheit gesteuert wird. Wenn dies nicht angegeben ist, ist die anwesenheitsbasierte Heizung immer aktiv.
      default:
      selector:
        entity:
          filter:
            - domain:
                - schedule
          multiple: false

    input_presence_reaction_off_time:
      name: Reaktionszeit bei Abwesenheit
      description:
        Legen Sie fest, wie viele Minuten der Anwesenheitssensor ausgeschaltet sein muss, damit die
        Temperatur auf das Minimum gesetzt wird.
      default: 5
      selector:
        number:
          min: 1
          max: 30.0
          step: 1.0
          mode: slider
          unit_of_measurement: min

    input_presence_reaction_on_time:
      name: Reaktionszeit bei Anwesenheit
      description: Legen Sie fest, wie viele Minuten der Anwesenheitssensor eingeschaltet sein muss, um die Heizung einzuschalten.
      default: 5
      selector:
        number:
          min: 1
          max: 10.0
          step: 1.0
          mode: slider
          unit_of_measurement: min

    input_change_comfort_temperature_on_physical_change:
      name: Physische Änderung der Komforttemperatur
      description: >
        Aktivieren Sie dies, wenn Sie die Komforttemperatur mit Ihren Ventilen steuern möchten.
        Eine Komforttemperatur *input_number* muss definiert sein. Beachten Sie, dass die Änderungen keine Auswirkungen auf die Mindesttemperatur haben.
        Die Temperatur für den Wertebereich der *input_number* wird ebenfalls angepasst.
      default: false
      selector:
        boolean: {}

    input_temperature_sensor:
      name: Externer Temperatursensor (optional)
      description: >
        Temperaturkalibrierung für Ihre TRVs. Folgendes wird unterstützt:

          * TRVs müssen eine Kalibrierungsnummer-Entität bereitstellen (entity_id muss *calibration* oder *offset* enthalten)
          * TADO TRVs

        Hinweis: Dies ist ein zusätzlicher Sensor in Ihrem Raum, normalerweise neben Ihrem Lieblingsplatz.
      default:
      selector:
        entity:
          filter:
            - domain:
                - sensor
              device_class:
                - temperature
          multiple: false

    input_calibration_delta:
      name: Kalibrierungsunterschied
      description: Wenn der Unterschied zwischen TRV-Temperatur und der Temperatur des externen Sensors größer oder kleiner als der Kalibrierungsunterschied ist, wird die TRV-Kalibrierung ausgelöst. Je kleiner der Unterschied, desto häufiger wird die Kalibrierung ausgelöst.
      default: 0.5
      selector:
        number:
          min: 0
          max: 2
          step: 0.1
          mode: slider
          unit_of_measurement: °C

    input_calibration_timeout:
      name: Kalibrierungs-Timeout
      description: Legen Sie eine Zeitüberschreitung fest, wenn Sie die Kalibrierungsaufrufe verringern möchten, wenn sich die Temperatur zu stark ändert. Zumindest die Temperatur des externen Sensors oder TRV muss für diese Dauer konstant bleiben, bevor die Kalibrierung ausgelöst wird.
      default: 1
      selector:
        number:
          min: 1
          max: 30.0
          step: 1.0
          mode: slider
          unit_of_measurement: min

    input_force_max_temperature:
      name: Maximale Temperatur erzwingen (optional)
      description: Legen Sie die maximale Temperatur aller TRVs unabhängig von anderen Einstellungen fest.
      default:
      selector:
        entity:
          filter:
            - domain:
                - input_boolean
          multiple: false

    input_off_instead_min:
      name: Ausschalten anstelle der Mindesttemperatur
      description: Wenn aktiviert, schalten sich Ihre Klimazonen *aus* anstelle einer niedrigeren Temperatur, wenn der Zeitplan deaktiviert ist oder keine Anwesenheit festgestellt wird.
      default: false
      selector:
        boolean: {}

    input_force_minimum_temperature:
      name: Mindesttemperatur erzwingen
      description: Aktivieren Sie diese Option, wenn Sie Probleme mit dem AUS-Modus haben. Anstelle sie auf AUS zu setzen, werden alle TRVs auf ihre individuelle Mindesttemperatur eingestellt.
      default: false
      selector:
        boolean: {}

    input_split_service_calls:
      name: Aufteilung der Serviceaufrufe
      description: Modus und Temperatur werden in einem Serviceaufruf festgelegt. Einige TRVs haben Probleme damit. Aktivieren Sie diese Option, um Modus und Temperatur in getrennten Serviceaufrufen festzulegen.
      default: false
      selector:
        boolean: {}

    input_service_call_delay:
      name: Verzögerung des Serviceaufrufs
      description:
        Einige TRVs haben Probleme mit der Einstellung von Modus und Temperatur. Sie können versuchen, die
        Verzögerung zwischen den Serviceaufrufen zu erhöhen. Dies könnte Ihre Probleme beheben.
      default: 2
      selector:
        number:
          min: 1.0
          max: 10.0
          step: 1.0
          mode: slider
          unit_of_measurement: s

##################################################
############### T R I G G E R ####################
##################################################

trigger_variables:
  # M O D E S
  input_mode_winter: !input input_mode_winter
  input_mode_party: !input input_mode_party
  input_mode_guest: !input input_mode_guest
  input_force_max_temperature: !input input_force_max_temperature
  input_mode_holiday: !input input_mode_holiday
  input_temperature_comfort: !input input_temperature_comfort
  input_temperature_comfort_static: !input input_temperature_comfort_static

  # S C H E D U L E R
  input_scheduler_regular: !input input_scheduler_regular
  input_scheduler_holiday: !input input_scheduler_holiday
  input_scheduler_presence: !input input_scheduler_holiday

  # A D D I T I O N A L   S E T T I N G S
  input_windows: !input input_windows
  input_temperature_sensor: !input input_temperature_sensor
  input_persons: !input input_persons
  input_presence_sensor: !input input_presence_sensor
  is_default_scheduler_configured: "{{ input_scheduler_regular != none }}"
  is_mode_holiday_configured: "{{ input_scheduler_holiday != none and mode_holiday != none }}"
  input_calibration_timeout: !input input_calibration_timeout

trigger:
  # S Y S T E M   T R I G G E R S
  - platform: homeassistant
    event: start
    id: hastart

  - platform: event
    event_type: automation_reloaded
  
  # S T A T E   T R I G G E R S
  - platform: state
    entity_id: !input input_trvs
    attribute: temperature
    for:
      seconds: 5
    id: comfort_change

  # T E M P E R A T U R E   C H A N G E S
  - platform: template
    value_template: >
      {% if input_temperature_comfort != none %}
        {{ as_timestamp(now()) - as_timestamp(states.input_number[input_temperature_comfort.split('.')[1]].last_updated) >= 2 }}
      {% else %}
        {{ false }}
      {% endif %}

  # S C H E D U L E R   O N / O F F
  - platform: template
    value_template: >
      {% if is_default_scheduler_configured %}
        {% set active_scheduler = iif(is_mode_holiday_configured and is_state(input_mode_holiday,'on'), input_scheduler_holiday, input_scheduler_regular) %} 
        {{ is_state(active_scheduler, 'on') }}
      {% else %}
        false
      {% endif %}

  - platform: template
    value_template: >
      {% if is_default_scheduler_configured %}
        {% set active_scheduler = iif(is_mode_holiday_configured and is_state(input_mode_holiday,'on'), input_scheduler_holiday, input_scheduler_regular) %} 
        {{ is_state(active_scheduler, 'off') }}
      {% else %}
        false
      {% endif %}

  # P E R S O N  P R E S E N C E
  - platform: template
    value_template: "{{ expand(input_persons) | selectattr('state', 'eq', 'home') | list | count > 0 }}"
    for:
      seconds: 2

  - platform: template
    value_template: "{{ expand(input_persons) | selectattr('state', 'eq', 'home') | list | count == 0 }}"
    for:
      seconds: 2

  # W I N D O W  O P E N
  - platform: template
    value_template: "{{ expand(input_windows) | selectattr('state', 'eq', 'on') | list | count > 0 }}"
    for:
      seconds: !input input_windows_reaction_time

  - platform: template
    value_template: "{{ expand(input_windows) | selectattr('state', 'eq', 'on') | list | count == 0 }}"
    for:
      seconds: !input input_windows_reaction_time

  # M O D E   -   H O L I D A Y
  - platform: template
    value_template: "{{ is_mode_holiday_configured and is_state(input_mode_holiday, 'on') }}"
    for:
      seconds: 2

  - platform: template
    value_template: "{{ is_mode_holiday_configured and is_state(input_mode_holiday, 'off') }}"
    for:
      seconds: 2

  # M O D E   -   W I N T E R
  - platform: template
    value_template: "{{ input_mode_winter != none and is_state(input_mode_winter, 'on') }}"
    for:
      seconds: 2

  - platform: template
    value_template: "{{ input_mode_winter != none and is_state(input_mode_winter, 'off') }}"
    for:
      seconds: 2

  # M O D E   -   M A I N T A N A C E
  - platform: template
    value_template: "{{ input_force_max_temperature != none and is_state(input_force_max_temperature, 'on') }}"
    for:
      seconds: 2

  - platform: template
    value_template: "{{ input_force_max_temperature != none and is_state(input_force_max_temperature, 'off') }}"
    for:
      seconds: 2

  # M O D E   -   P A R T Y
  - platform: template
    value_template: "{{ input_mode_party != none and states(input_mode_party) in ['on','active'] }}"
    for:
      seconds: 2

  - platform: template
    value_template: "{{ input_mode_party != none and states(input_mode_party) in ['off','idle','paused'] }}"
    for:
      seconds: 2

  # M O D E   -   G U E S T
  - platform: template
    value_template: "{{ input_mode_guest != none and states(input_mode_guest) in ['on','active'] }}"
    for:
      seconds: 2
  - platform: template
    value_template: "{{ input_mode_guest != none and states(input_mode_guest) in ['off','idle','paused'] }}"
    for:
      seconds: 2

  # P R E S E N C E   S E N S O R
  - platform: template
    value_template: "{{ input_presence_sensor != none and is_state(input_presence_sensor, 'on') }}"
    for:
      minutes: !input input_presence_reaction_on_time

  - platform: template
    value_template: "{{ input_presence_sensor != none and is_state(input_presence_sensor, 'off') }}"
    for:
      minutes: !input input_presence_reaction_off_time

  # P R E S E N C E   S C H E D U L E R
  - platform: template
    value_template: "{{ input_scheduler_presence != none and is_state(input_scheduler_presence, 'on') }}"
    for:
      seconds: 2

  - platform: template
    value_template: "{{ input_scheduler_presence != none and is_state(input_scheduler_presence, 'off') }}"
    for:
      seconds: 2

  # E X T E R N A L  C A L I B R A T I O N   S E N S O R
  - platform: template
    id: "calibration_sensor_temp"
    value_template: >
      {% if input_temperature_sensor != none %}
        {{ as_timestamp(now()) - as_timestamp(states.sensor[input_temperature_sensor.split('.')[1]].last_updated) >= input_calibration_timeout * 60 }}
      {% else %}
        {{ false }}
      {% endif %}

  - platform: state
    id: "calibration_trv_temp"
    entity_id: !input input_trvs
    attribute: current_temperature
    for:
      minutes: !input input_calibration_timeout

##################################################
############### V A R I A B L E S ################
##################################################

variables:
  # I N P U T S
  input_trvs: !input input_trvs
  input_force_minimum_temperature: !input input_force_minimum_temperature
  input_temperature_comfort: !input input_temperature_comfort
  input_temperature_comfort_static: !input input_temperature_comfort_static
  input_temperature_minimum: !input input_temperature_minimum
  input_scheduler_regular: !input input_scheduler_regular
  input_scheduler_holiday: !input input_scheduler_holiday
  input_scheduler_presence: !input input_scheduler_presence
  input_windows: !input input_windows
  input_mode_holiday: !input input_mode_holiday
  input_mode_winter: !input input_mode_winter
  input_mode_party: !input input_mode_party
  input_mode_guest: !input input_mode_guest
  input_force_max_temperature: !input input_force_max_temperature
  input_persons: !input input_persons
  input_presence_sensor: !input input_presence_sensor
  input_presence_reaction_off_time: !input input_presence_reaction_off_time
  input_presence_reaction_on_time: !input input_presence_reaction_on_time
  input_temperature_sensor: !input input_temperature_sensor
  input_split_service_calls: !input input_split_service_calls
  input_calibration_delta: !input input_calibration_delta
  input_off_instead_min: !input input_off_instead_min
  input_change_comfort_temperature_on_physical_change: !input input_change_comfort_temperature_on_physical_change

  # V A L V E   G R O U P S
  valves: "{{ expand(input_trvs) | map(attribute='entity_id') | list }}"
  valves_off_mode: >
    {% set climates_off = namespace(name=[]) %} 

    {% for climate in valves %}
      {% if state_attr(climate,'hvac_modes') | regex_search('off', ignorecase=True) %}
        {% set climates_off.name = climates_off.name + [climate] %}
      {% endif %}
    {% endfor %} 

    {{ climates_off.name }}

  valves_without_off_mode: >
    {% set climates_not_off = namespace(name=[]) %} 

    {% for climate in valves %}
      {% if climate not in valves_off_mode %}
        {% set climates_not_off.name = climates_not_off.name + [climate] %}
      {% endif %}
    {% endfor %} 

    {{ climates_not_off.name }}

  valves_tado: |
    {% set climates_tado = namespace(name=[]) %}

    {% for climate in valves %}
      {% if device_attr(climate,'manufacturer') | regex_search('tado', ignorecase=True)%}
        {% set climates_tado.name = climates_tado.name + [climate] %}
      {% endif %}
    {% endfor %}

    {{ climates_tado.name }}

##################################################
########### C O N D I T I O N S ##################
##################################################

condition:
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ trigger.id == 'comfort_change' and input_temperature_comfort != none and trigger.to_state.context.id != none and trigger.to_state.context.parent_id == none and trigger.to_state.context.user_id == none }}"
      - condition: template
        value_template: "{{ (trigger.id == 'calibration_sensor_temp' or trigger.id == 'calibration_trv_temp') and input_temperature_sensor != none }}"
      - condition: template
        value_template: "{{ trigger.id not in ['calibration_sensor_temp','comfort_change','calibration_trv_temp'] }}"

##################################################
################## A C T I O N ###################
##################################################

action:
  # DELAY AFTER HA START
  - if:
    - condition: trigger
      id: "hastart"
    then:
      - delay:
          seconds: 30    

  # SETTING UP VARIABLES
  - variables:
      # S T A T E S
      state_mode_party: "{{ input_mode_party != none and states(input_mode_party) in ['on','active'] }}"
      state_mode_guest: "{{ input_mode_guest != none and is_state(input_mode_guest, 'on') }}"
      state_mode_winter: "{{ input_mode_winter == none or (input_mode_winter != none and is_state(input_mode_winter, 'on')) }}"
      state_force_max_temperature: "{{ input_force_max_temperature != none and is_state(input_force_max_temperature, 'on') }}"
      state_window: "{{ expand(input_windows) | selectattr('state', 'eq', 'on') | list | count > 0 }}"
      state_presence_sensor: "{{ input_presence_sensor != none and is_state(input_presence_sensor, 'on') }}"

      state_temperature_comfort: >
        {% if input_temperature_comfort != none%}
          {{ states(input_temperature_comfort) }}
        {% else %}
          {{ input_temperature_comfort_static }}
        {% endif %}
      state_mode_holiday: "{{ input_mode_holiday != none and is_state(input_mode_holiday, 'on') }}"
      active_scheduler: "{{ iif(state_mode_holiday, input_scheduler_holiday, input_scheduler_regular) }}"
      is_anybody_home: "{{ expand(input_persons) | selectattr('state', 'eq', 'home') | list | count > 0 or state_mode_guest }}"
      is_mode_holiday_configured: "{{ input_scheduler_holiday != none and input_mode_holiday != none and is_state(input_mode_holiday, 'on') }}"
      is_scheduler_on: "{{ active_scheduler != none and states(active_scheduler) == 'on' }}"

      is_presence_sensor_defined: "{{ input_presence_sensor != none }}"
      is_presence_scheduler_defined: "{{ input_scheduler_presence != none }}"
      is_presence: >
        {{ 
          (is_presence_scheduler_defined == true and is_state(input_scheduler_presence,'on') and is_presence_sensor_defined == true and is_state(input_presence_sensor, 'on'))
          or
          (is_presence_scheduler_defined == false and is_presence_sensor_defined == true and is_state(input_presence_sensor, 'on'))
        }}

      # T R V - V A L U E S
      set_comfort: >
        {% if state_mode_party == true %}
          {{ true }}
        {% else %}
          {% if (is_scheduler_on == true and (is_anybody_home or input_persons | count == 0)) %}
              {{ true }}
          {% else %}
            {% if (is_presence == true) %}
              {{ true }}
            {% else %}
              {{ false }}
            {% endif %}
          {% endif %}
        {% endif %}

      mode: >
        {% if ((state_mode_winter == true or state_mode_party == true) and state_window == false) or state_force_max_temperature == true %}
          {% if input_off_instead_min == true and set_comfort == false %}
            off
          {% else %}
            heat
          {% endif %}
        {% else %}
          off
        {% endif %}

      temperature: "{{ iif(set_comfort, state_temperature_comfort, input_temperature_minimum) }}"

      trvs_temp_is_none: "{{ expand(input_trvs) | selectattr('attributes.temperature', 'defined') | selectattr('attributes.temperature', 'eq', none) | map(attribute='entity_id') | list }}"
      trvs_temp_not_set: "{{ expand(input_trvs) | selectattr('attributes.temperature', 'defined') | rejectattr('attributes.temperature', 'eq', float(temperature)) | map(attribute='entity_id') | list }}"
      trvs_mode_not_set: "{{ expand(input_trvs) | rejectattr('state', 'eq', mode) | map(attribute='entity_id') | list }}"
      trvs_mode_and_temp_not_set: "{{ (((trvs_temp_not_set + trvs_temp_is_none) | reject('in', trvs_mode_not_set) | list) + trvs_mode_not_set) | list }}"

  - service: system_log.write
    data:
      message: >
        {{" \n "}}
        - state_mode_party: {{ state_mode_party }} {{" \n "}}
        - state_mode_guest: {{state_mode_guest }} {{" \n "}}
        - state_mode_winter: {{ state_mode_winter }} {{" \n "}}
        - state_force_max_temperature: {{ state_force_max_temperature }} {{" \n "}}
        - state_window: {{ state_window }} {{" \n "}}
        - state_presence_sensor: {{ state_presence_sensor }} {{" \n "}}
        - state_temperature_comfort: {{ state_temperature_comfort }} {{" \n "}}
        - state_mode_holiday: {{ state_mode_holiday }} {{" \n "}}
        - mode: {{ mode }} {{" \n "}}
        - active_scheduler: {{ active_scheduler }} {{" \n "}}
        - is_anybody_home: {{ is_anybody_home }} {{" \n "}}
        - is_mode_holiday_configured: {{ is_mode_holiday_configured }} {{" \n "}}
        - is_scheduler_on: {{ is_scheduler_on }} {{" \n "}}
        - is_presence_sensor_defined: {{ is_presence_sensor_defined }} {{" \n "}}
        - is_presence_scheduler_defined: {{ is_presence_scheduler_defined }} {{" \n "}}
        - is_presence: {{ is_presence }} {{" \n "}}
        - temperature: {{ temperature }} {{" \n "}}
        - valves: {{ valves }} {{" \n "}}
        - valves_off_mode: {{ valves_off_mode }} {{" \n "}}
        - valves_without_off_mode: {{ valves_without_off_mode }} {{" \n "}}
        - valves_tado: {{ valves_tado }} {{" \n "}}
        - trvs_temp_not_set: {{ trvs_temp_not_set }} {{" \n "}}
        - trvs_mode_not_set: {{ trvs_mode_not_set }} {{" \n "}}
        - trvs_mode_and_temp_not_set: {{ trvs_mode_and_temp_not_set }}
      level: debug
      logger: blueprints.panhans.heatingcontrol

  # ----------------------------------------------------------------------------------------------------------------------------------------------------------
  # A C T I O N S 
  - choose:
      # MANUAL COMFORT CHANGE -------------------------------------------------------------------------------------------------------------
      - conditions:

          - condition: trigger
            id: "comfort_change"

          - condition: template
            value_template: "{{ input_temperature_comfort != none }}"

          - condition: template
            value_template: "{{ input_change_comfort_temperature_on_physical_change }}"

        sequence:
          - variables:
              new_manual_temp: "{{ trigger.to_state.attributes.temperature }}"
              max_comfort_temp: "{{ state_attr(input_temperature_comfort,'max') }}"
              min_comfort_temp: "{{ state_attr(input_temperature_comfort,'min') }}"
              real_manual_temp: > 
                {% if (new_manual_temp > max_comfort_temp) %}
                  {{ max_comfort_temp }}
                {% elif (new_manual_temp < min_comfort_temp ) %}
                  {{ min_comfort_temp }}
                {% else %}
                  {{ new_manual_temp }}
                {% endif %}
          - if:
            - condition: template
              value_template: "{{ new_manual_temp > max_comfort_temp or new_manual_temp < min_comfort_temp }}"
            then:
            - service: system_log.write
              data:
                level: warning
                logger: blueprints.panhans.heatingcontrol
                message: "{{ input_temperature_comfort }} kann Zahlen zwischen {{ min_comfort_temp }} und {{ max_comfort_temp }} verarbeiten. Sie möchten die Temperatur auf {{ new_manual_temp }} °C einstellen. Daher wird sich die Komforttemperatur automatisch auf {{ real_manual_temp }} °C anpassen."
          - service: system_log.write
            data:
              level: debug
              logger: blueprints.panhans.heatingcontrol
              message: "Komforttemperatur wird auf {{ real_manual_temp }} °C eingestellt."
          - service: input_number.set_value
            data:
              value: "{{ real_manual_temp }}"
            target:
              entity_id: !input input_temperature_comfort
          - delay:
              seconds: !input input_service_call_delay

      # CALIBRATION -------------------------------------------------------------------------------------------------------------
      - conditions:

          - condition: or
            conditions:
              - condition: trigger
                id: "calibration_trv_temp"
              - condition: trigger
                id: "calibration_sensor_temp"
          - condition: template
            value_template: "{{ mode == 'heat' }}"

        sequence:
          - repeat:
              count: "{{ valves | count | int }}"
              sequence:
                - variables:
                    current_valve: "{{ valves[repeat.index-1] }}"
                    calibration_entity: >
                      {% set entities =  device_entities(device_id(current_valve)) %}
                      {% set calibration_entity_id = namespace(id=[]) %} 
                      {% for s in entities %}
                        {% if (('calibration' in s) or ('offset' in s))  %}
                          {% set calibration_entity_id.id = s %}
                        {% endif %}
                      {% endfor %} 
                      {{ iif (calibration_entity_id.id[0] is defined, calibration_entity_id.id, '')  }}
                - if:
                    - condition: template
                      value_template: "{{ calibration_entity != '' or current_valve in valves_tado }}"
                  then:
                    - variables:
                        offset_old: >
                          {% if  calibration_entity != '' %}
                            {{ states(calibration_entity) }}
                          {% else %}
                            {{ state_attr(current_valve, 'offset_celsius') }}
                          {% endif %}
                        offset_new: >
                          {% set actual_sensor_temperature = states(input_temperature_sensor) | float(0) | round(1) %}
                          {% set local_temperature = state_attr(current_valve,'current_temperature') | float(0) %}

                          {% if calibration_entity != '' %}

                            {% set step = state_attr(calibration_entity,'step') %}
                            {% set actual_trv_temperature = float(local_temperature) - offset_old | float(0) | round(1) %} 
                            {% set new_calibration_value =  actual_sensor_temperature - actual_trv_temperature %}
                            {% set min_calibration_value = state_attr(calibration_entity,'min') | float(0) %}
                            {% set max_calibration_value = state_attr(calibration_entity,'max') | float(0) %}
                            
                            {% if(new_calibration_value > max_calibration_value) %}
                              {% set new_calibration_value = max_calibration_value %}
                            {% elif (new_calibration_value < min_calibration_value) %}
                              {% set new_calibration_value = min_calibration_value %}
                            {% endif %}
                            
                            {{ (new_calibration_value | float(0) / step) | round(0) * step }}

                          {% else %}
                            {% set offset = float(actual_sensor_temperature) - float(local_temperature) %}
                            {% set calculated_offset = ( float(offset) + offset_old | float(0) ) | round(2) %}

                            {{ calculated_offset }}
                          {% endif %}
                    - service: system_log.write
                      data:
                        message: >
                          - is_tado_calibration: {{ calibration_entity == '' }} {{" \n "}}
                          - offset_old: {{ offset_old }} {{" \n "}}
                          - offset_new: {{ offset_new }}
                        level: debug
                        logger: blueprints.panhans.heatingcontrol
                    - if:
                        - condition: template
                          value_template: "{{ offset_old == none or ((float(offset_old) - float(offset_new)) | abs >= float(input_calibration_delta))  }}"
                      then:
                        - if:
                            - condition: template
                              value_template: "{{ calibration_entity != '' }}"

                          # SET GENERIC OFFSET
                          then:
                            - service: number.set_value
                              data:
                                value: "{{ float(offset_new) }}"
                              target:
                                entity_id: "{{ calibration_entity }}"

                          # SET TADO OFFSET
                          else:
                            - service: tado.set_climate_temperature_offset
                              data:
                                offset: "{{ offset_new }}"
                                entity_id: "{{ current_valve }}"

                        - delay:
                            seconds: !input input_service_call_delay
    
    # SET MODE & TEMPERRATURE -------------------------------------------------------------------------------------------------------------
    default:
      - if:
          - condition: template
            value_template: "{{ mode == 'off' }}"
        then:
          # SET TEMPERATURE TO MINIMUM INSTEAD TO MODE OFF
          - if:
              - condition: template
                value_template: "{{ input_force_minimum_temperature or valves_without_off_mode | count > 0 }}"
            then:
              - variables:
                  low_temp_valves: "{{ iif(input_force_minimum_temperature == true, valves, valves_without_off_mode) }}"
              - repeat:
                  count: "{{ low_temp_valves | count | int }}"
                  sequence:
                    - variables:
                        current_valve: "{{ low_temp_valves[repeat.index-1] }}"
                        off_temperature: "{{ state_attr(current_valve,'input_temperature_minimum') }}"
                        temperature: "{{ state_attr(current_valve,'temperature') }}"
                    - if:
                        - condition: template
                          value_template: "{{ temperature != off_temperature }}"
                      then:
                        - service: climate.set_temperature
                          data:
                            entity_id: "{{ current_valve }}"
                            temperature: "{{ off_temperature | float }}"
                        - delay:
                            seconds: !input input_service_call_delay

            # SET MODE TO OFF AND NOT MIN TEMP
            else:
              - if:
                  - condition: template
                    value_template: "{{ valves_off_mode | count > 0 }}"
                  - condition: template
                    value_template: "{{ input_force_minimum_temperature == false }}"
                then:
                  if:
                    - condition: template
                      value_template: "{{ trvs_mode_not_set | count > 0 }}"
                  then:
                    - variables:
                        valves_to_turn_off: "{{ (valves_off_mode | select('in', trvs_mode_not_set) | list) }}"
                    - if:
                        - condition: template
                          value_template: "{{ input_split_service_calls == true }}"
                      then:
                        - repeat:
                            count: "{{ valves_to_turn_off | count | int }}"
                            sequence:
                              - variables:
                                  current_valve: "{{ valves_to_turn_off[repeat.index-1] }}"
                              - service: climate.set_hvac_mode
                                target:
                                  entity_id: "{{ current_valve }}"
                                data:
                                  hvac_mode: "off"
                              - delay:
                                  seconds: !input input_service_call_delay
                      else:
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ (valves_off_mode | select('in', trvs_mode_not_set) | list)}}"
                          data:
                            hvac_mode: "off"
                        - delay:
                            seconds: !input input_service_call_delay

        # IF NOT OFF -> HEAT
        else:
          - if:
              - condition: template
                value_template: "{{ state_force_max_temperature or input_split_service_calls }}"
            # FORCE MAX TEMP
            then:
              - variables:
                  valves_to_be_set: "{{ iif(state_force_max_temperature, valves, trvs_mode_and_temp_not_set) }}"
              - repeat:
                  count: "{{ valves_to_be_set | count | int }}"
                  sequence:
                    - variables:
                        current_valve: "{{ valves_to_be_set[repeat.index-1] }}"
                        new_temperature: "{{ iif(state_force_max_temperature,state_attr(current_valve,'max_temp'),temperature) }}"
                    - if:
                        - condition: template
                          value_template: "{{ states(current_valve) != mode }}"
                      then:
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: "{{ current_valve }}"
                          data:
                            hvac_mode: "{{ mode }}"
                        - delay:
                            seconds: !input input_service_call_delay
                    - if:
                        - condition: template
                          value_template: "{{ state_attr(current_valve, 'temperature') != new_temperature }}"
                      then:
                        - service: climate.set_temperature
                          data:
                            entity_id: "{{ current_valve }}"
                            temperature: "{{ new_temperature | float }}"
                        - delay:
                            seconds: !input input_service_call_delay
            else:
              - if:
                  - condition: template
                    value_template: "{{ trvs_mode_not_set | count > 0 }}"
                then:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: "{{ trvs_mode_not_set }}"
                    data:
                      hvac_mode: "{{ mode }}"
                  - delay:
                      seconds: !input input_service_call_delay
              - if:
                  - condition: template
                    value_template: "{{ trvs_temp_not_set | count > 0 }}"
                then:
                  - service: climate.set_temperature
                    data:
                      entity_id: "{{ trvs_temp_not_set }}"
                      temperature: "{{ temperature | float }}"
                  - delay:
                      seconds: !input input_service_call_delay
mode: queued
